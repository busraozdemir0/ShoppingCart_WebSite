@page "/login"

<style>
    .loginBox {
        font-family: 'Open Sans', sans-serif;
        margin: 0 auto 0 auto;
        width: 100%;
        text-align: center;
        margin: 20px 0px 20px 0px;
    }

    p {
        font-size: 12px;
        text-decoration: none;
        color: #ffffff;
    }

    h1 {
        font-size: 1.5em;
        color: #525252;
    }

    .box {
        background: white;
        width: 300px;
        border-radius: 6px;
        margin: 0 auto 0 auto;
        padding: 0px 0px 70px 0px;
        border: #f5f542 4px solid;
    }

    .email {
        background: #ffffff;
        border: #ccc 1px solid;
        border-bottom: #ccc 2px solid;
        padding: 8px;
        width: 250px;
        color: #525252;
        margin-top: 10px;
        font-size: 1em;
        border-radius: 4px;
    }

    .password {
        border-radius: 4px;
        background: #ecf0f1;
        border: #ccc 1px solid;
        padding: 8px;
        width: 250px;
        font-size: 1em;
    }

    .btn {
        background: #2ecc71;
        width: 125px;
        padding-top: 5px;
        padding-bottom: 5px;
        color: white;
        border-radius: 4px;
        border: #27ae60 1px solid;
        margin-top: 20px;
        margin-bottom: 20px;
        float: left;
        margin-left: 16px;
        font-weight: 800;
        font-size: 0.8em;
    }

        .btn:hover {
            background: #2CC06B;
        }

    #btn2 {
        float: left;
        background: #3498db;
        width: 125px;
        padding-top: 5px;
        padding-bottom: 5px;
        color: white;
        border-radius: 4px;
        border: #2980b9 1px solid;
        margin-top: 20px;
        margin-bottom: 20px;
        margin-left: 10px;
        font-weight: 800;
        font-size: 0.8em;
    }

        #btn2:hover {
            background: #3594D2;
        }
</style>

<div style="min-height:550px;">
    <div class="loginBox">
        <div class="box">
            <h1>Login</h1>
            @if (loginModel != null)
            {
                <EditForm Model="@loginModel" OnValidSubmit="Login_Click">
                    <DataAnnotationsValidator />
                   
                    <InputText typeof="email" name="email" placeholder="Email" class="email mb-2" @bind-Value="loginModel.EmailId" autocomplete="off" />
                    <ValidationMessage For="@(()=> loginModel.EmailId)" />

                    <InputText typeof="password" name="email" placeholder="Password" class="email" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(()=> loginModel.Password)" />

                    <input type="submit" class="btn" value="Login" />
                    <a href="register"><div id="btn2">Register</div></a>
                </EditForm>
            }
        </div>
        <div>
            <br /> <br />
            <p style="color:#e52e50">
                <h4>@alertMessage</h4>
            </p>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public EventCallback notify { get; set; }

    public LoginModel loginModel { get; set; }
    public string alertMessage { get; set; }

    protected override Task OnInitializedAsync()
    {
        loginModel = new LoginModel();
        return base.OnInitializedAsync();
    }

    private async Task Login_Click()
    {
        var response = await userPanelService.LoginUser(loginModel);
        if (response.Status)
        {
            var user_response = response.Message.Split("|");
            await sessionStorage.SetAsync("userKey", user_response[0]);
            await sessionStorage.SetAsync("userName", user_response[1]);
            await sessionStorage.SetAsync("userEmail", user_response[2]);
            await notify.InvokeAsync();
            navManager.NavigateTo("/");
        }
        else
        {
            alertMessage = response.Message;
        }
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var login_session = await userPanelService.IsUserLoggedIn();
            if (login_session)
            {
                navManager.NavigateTo("/");
            }

            var checkout_session = await sessionStorage.GetAsync<string>("checkoutAlert");
            if (checkout_session.Success)
            {
                this.alertMessage = checkout_session.Value;
                StateHasChanged();
            }
        }
    }
}
